// Partically generated by Selenium IDE.
const { Builder, By } = require('selenium-webdriver')

class Scraper {
  trimString(s) {
    return s.trimStart().trimEnd().replace(',','')
  }
  parseCaseInfo(cellText) {
    let chunks = cellText.split('Case:')
    let clientAddress = this.trimString(chunks[0])
    let subChunks = cellText.match(/\d\d\d\d\d\d\d/)
    let caseNumber = ''
    if (subChunks.length > 0) {
      caseNumber = subChunks[0]
    }
    return [clientAddress, caseNumber]
  }
  async getCaseInfo(driver, caseNumber) {
    const by = By.linkText(caseNumber)
    const elem = driver.findElement(by)
    await elem.click()
/*
    let URL = 'https://gscivildata.shelbycountytn.gov/pls/gnweb/ck_public_qry_doct.cp_dktrpt_frames?backto=P&case_id=' + caseNumber + '&begin_date=&end_date='
    await driver.get(URL)
*/
    let courtDate = await driver.findElement(By.css("a:nth-child(5) td:nth-child(2)")).getText()
    let room = await driver.findElement(By.css("a:nth-child(5) td:nth-child(3)")).getText()
    let location = await driver.findElement(By.css("a:nth-child(5) td:nth-child(4)")).getText()
    await driver.execute_script('window.history.go(-1)')
    return [courtDate, room, location]
  }
  async scrapeOnePage(driver) {
    const NAME_CORPORATION_COLUMN = 2
    const ADDRESS_COLUMN = 3
    const PARTY_TYPE_COLUMN = 4
    await driver.switchTo().frame(1)
        // Firefox fails here with "NoSuchWindowError: Browsing context has been discarded"

    // TODO : loop down table rows
    const party_type = await driver.findElement(By.css("tr:nth-child(2) > td:nth-child(" + PARTY_TYPE_COLUMN + ")")).getText()
    if (party_type === 'DEFENDANT') {
      const defendant_name = await driver.findElement(By.css("tr:nth-child(2) > td:nth-child(" + NAME_CORPORATION_COLUMN + ")")).getText()
      const address = await driver.findElement(By.css("tr:nth-child(2) > td:nth-child(" + ADDRESS_COLUMN + ")")).getText()

      let clientAddress
      let caseNumber
      [clientAddress, caseNumber] = this.parseCaseInfo(address)
      if (caseNumber) {
        let courtDate
        let room
        let location
        [courtDate, room, location] = this.getCaseInfo(driver, caseNumber)
        let first_name
        let last_name
        if (defendant_name.includes(',')) {
          [last_name, first_name] = defendant_name.split(',')
        } else {
          first_name = ''
          last_name = defendant_name
        }
        console.log(this.trimString(first_name) + ',' +
                    this.trimString(last_name) + ',' +
                    this.trimString(caseNumber) + ',' +
                    this.trimString(courtDate) + ',' +
                    this.trimString(location) + ',' +
                    this.trimString(room) + ',' +
                    this.trimString(location) + ','
        )
      }
    }
  }
  async scrapeByFirstLetter(driver, firstLetter) {
    await driver.get("https://gscivildata.shelbycountytn.gov/pls/gnweb/ck_public_qry_cpty.cp_personcase_setup_idx")
    await driver.switchTo().frame(1)
    await driver.findElement(By.name("partial_ind")).click()
    await driver.findElement(By.name("last_name")).click()
    await driver.findElement(By.name("last_name")).sendKeys(firstLetter)
    await driver.findElement(By.name("begin_date")).click()
    await driver.findElement(By.name("begin_date")).sendKeys("01-NOV-2021")
    await driver.findElement(By.css("tr:nth-child(7) > td:nth-child(1)")).click()
    await driver.findElement(By.name("end_date")).click()
    await driver.findElement(By.name("end_date")).sendKeys("14-NOV-2021")
    await driver.findElement(By.name("case_type")).click()
    await driver.findElement(By.css("option:nth-child(17)")).click()
    await driver.findElement(By.css("input:nth-child(4)")).click()
    await this.scrapeOnePage(driver)
  }
  async scrapeData() {
    const TIMEOUT_IN_SECONDS = 30 * 1000
    let driver = await new Builder().forBrowser('chrome').build()
    await driver.manage().setTimeouts( { implicit: TIMEOUT_IN_SECONDS, pageLoad: TIMEOUT_IN_SECONDS, script: TIMEOUT_IN_SECONDS } )
    for (let letter of ['A']) {
      await this.scrapeByFirstLetter(driver, letter)
    }
    await driver.quit();
  }
}
new Scraper().scrapeData()
